<?php
// $Id: mail2og.module,v 1.1.2.3 2009/06/30 17:27:08 arthuregg Exp $

/**
 *  @TODO support token replacement on CCK fields
 */


/* ******************************************* */
/* Drupal hooks                                */
/* ******************************************* */

/**
 * Implementation of hook_menu()
 */
function mail2og_menu() {
  $items = array();
  $items['admin/settings/mail2og'] = array(
    'title' => 'mail2og settings',
    'description' => 'Configure a gateway for email to og posts',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mail2og_administration_form'),
    'access arguments' => array('administer mail2og'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}


/**
 * Implementation of hook_perm
 * @return unknown_type
 */
function mail2og_perm() {
  return array('administer mail2og', 'send to group');
}


/**
 * Implementation of hook_block
 * @param $op
 *   string, current operator
 * @param $deleta
 *   string, what block is being called
 * @param $edit
 *   array, edit values
 * @return array
 */
function mail2og_block($op, $delta = '', $edit = array()) {
  switch ($op) {
    case 'list':
      return array('mail2og_block_info' => array(
        'info' => t('Email information for Mail2og')),
      );
      break;
    case 'view':
      return $delta();
      break;
  }
}


/**
 * Implementation of hook_theme
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 * @return array
 */
function mail2og_theme($existing, $type, $theme, $path) {
  return array(
    'mail2og_block_display_email_info' => array(
      'arguments' => array(
        'group' => NULL,
        'email' => NULL,
      ),
    ),
    'mail2og_field' => array(
      '#input' => TRUE,
      '#columns' => array('value'), '#delta' => 0,
      '#process' => array('mail2og_emailfield_process'),
      '#autocomplete_path' => FALSE,
    ),
    'mail2og_emailfield' => array(
      'arguments' => array('element' => NULL),
    ),
    'mail2og_emailfield_formatter' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}


/**
 * Implementation of FAPI hook_elements().
 *
 * Any FAPI callbacks needed for individual widgets can be declared here,
 * and the element will be passed to those callbacks for processing.
 *
 * Drupal will automatically theme the element using a theme with
 * the same name as the hook_elements key.
 *
 * Autocomplete_path is not used by text_widget but other widgets can use it
 * (see nodereference and userreference).
 */
function mail2og_elements() {
  return array(
    'mail2og_emailfield' => array(
      '#input' => TRUE,
      '#columns' => array('value'), '#delta' => 0,
      '#process' => array('mail2og_emailfield_process'),
      '#autocomplete_path' => FALSE,
    ),
  );
}


/* ******************************************* */
/* Internal Functions                          */
/* ******************************************* */

/**
 * Admin settings for mail2og()
 * sets default content types
 * allow/disallow posting options - non-members, members,
 */
function mail2og_administration_form() {
  // @TODO add more settings to control some og posting options, etc.

  // select the groups to enable
  $form['mail2og_enabled_groups'] = array(
    '#type' => 'select',
    '#multiple' => true,
    '#title' => t('Enable mail2og on'),
    '#options' =>  array_merge(array(0 => t('All groups')), og_all_groups_options()),
    '#default_value' => variable_get('mail2og_enabled_groups', 0),
    '#description' => t('Select the groups you want to enable mail2og on. Default is all')
  );

  // set the default content type. Check the kind of OG content types that are
  // enabled
  $og_types = og_get_types('group_post');
  $og_types = array_combine(array_values($og_types), array_values($og_types));
  $form['mail2og_default_node_type'] = array(
    '#type' => 'select',
    '#title' => t('Default content post type'),
    '#options' => $og_types,
    '#default_value' => variable_get('mail2og_default_node_type', 0),
    '#description' => t('Select default content type for submissions. Default will use the content type defined by mailhandler.')
  );

  // get a list of the mailboxes that are enabled on the system
  $result = db_query('SELECT * FROM {mailhandler} ORDER BY mail');
  $options = array(0 => t('Choose a mailbox'));
  while ($mailbox = db_fetch_object($result)) {
    $options[$mailbox->mid] = $mailbox->mail;
  }
  $form['mail2og_mailbox_setting'] = array(
    '#type' => 'select',
    '#title' => t('Mailbox for retriving group email'),
    '#options' => $options,
    '#default_value' => variable_get('mail2og_mailbox_setting', null),
    '#description' => t('Select the mailhandler mailbox you wish to use to retrive group emails'),
  );
  $form['mail2og_mailbox_setting'] = array(
    '#type' => 'select',
    '#title' => t('Mailbox for retriving group email'),
    '#options' => $options,
    '#default_value' => variable_get('mail2og_mailbox_setting', null),
    '#description' => t('Select the mailhandler mailbox you wish to use to retrive group emails'),
  );
  $form['mail2og_default_email_domain'] = array(
    '#type' => 'textfield',
    '#title' => t('Default email address domain'),
    '#options' => $options,
    '#default_value' => variable_get('mail2og_default_email_domain', null),
    '#description' => t('This sets the default email address domain that users
      will send their posts to. This will automatically be set based on the
      mailbox you choose, or you can set it by hand here'),
  );

  if (module_exists('content')) {
    $options = array(0 => t('Choose a field'));
    // what types can we use this one
    $allowed_types = array('mail2og_emailfield');
    $fields = content_fields(null, $type);
    foreach ($fields as $field) {
      if (in_array($field['type'], $allowed_types)) {
        $options[$field['name']] = $field['widget']['label'];
      }
    }
    $form['mail2og_og_cck_name'] = array(
      '#type' => 'select',
      '#title' => t('Choose a mail2og field to link emails to your groups'),
      '#options' => $options,
      '#default_value' => variable_get('mail2og_og_cck_name', null),
      '#description' => t('You can use a CCK field to define the name of the email address that groups use.'),
    );
  }

  $form['#submit'][] = 'mail2og_default_mailbox_domain_submit';
  return system_settings_form($form);
}


/**
 * Sets the default mail domain
 * @param $form
 * @param $form_state
 * @return unknown_type
 */
function mail2og_default_mailbox_domain_submit($form, $form_state) {
  if (! variable_get('mail2og_mailbox_setting', false)) {
    $mailbox = mailhandler_get_mailbox($form_state['values']['mail2og_mailbox_setting']);
    $domain = preg_replace("/(.*\@)/", '', $mailbox['mail']);
    variable_set('mail2og_default_email_domain', $domain);
  }
}


/**
 * Block to display on group pagees
 * @return string
 */
function mail2og_block_info() {
  // is this user allowed to post?
  if (! user_access('send to group')) {
    return;
  }
  // make sure we are on a group page
  if (! $group = og_determine_context()) {
    return;
  }

  // are we using a mailbox?
  if ($mailbox = variable_get('mail2og_mailbox_setting', 0)) {
    $mailbox = mailhandler_get_mailbox($mailbox);
    // parse the domain
    $domain = preg_replace("/(.*\@)/", '', $to_address);
    // create the group name
    $name = mail2og_email_to_address_create($group->title);
    // prefix the domain with modified group domain
    $email = "$name@$domain";
  }
  // are we using a cck field?
  elseif (! $field = variable_get('mail2og_og_cck_name', null)) {
    $field = $group->$field;
    $email = $field['#value'];
  }

  // nothing to see here
  if (! $email) {
    return;
  }

  // @TODO make sure that this user has rights to
  // post to this specific group

  return array(
    'subject' => t('Post by email'),
    'content' => theme('mail2og_block_display_email_info', $group, $email)
  );
}


/**
 * Implementation of hook_mailhandler()
 * Check incoming mail to see if it needs to be associated with a
 * group. This uses the to address (to@domain.com)
 */
function mail2og_mailhandler(&$node, $result, $i, $header, $mailbox) {
  // check to see if this mailbox is enabled for group mail
  if (variable_get('mail2og_mailbox_setting', false)) {
    // breakup the to address so we can figure out the to address
    $pattern = '/^([^"].*?)@/';
    preg_match($pattern, $header->toaddress, $matches);
    // now clean the title to match with
    $group_name = mail2og_email_from_address_find($matches[1]);
    // try to find the group with this title
    $gid = db_result(db_query('SELECT n.nid FROM {node} n WHERE n.title LIKE "%%%s%%"', $group_name));
    $group = node_load($gid);
  }

  // Are we matching a CCK field?
  if ($field = variable_get('mail2og_og_cck_name', false) && ! $group) {
    $db_info = content_database_info($field);
    $nid = db_result(db_query('SELECT nid FROM '. $db_info['table'] .' WHERE '. $db_info['columns']['value']['column'] .' = "%s"', $header->toaddress));
    $group = node_load($nid);
  }

  // nothing to see
  if (! $group) {
    return;
  }

  // is this group enabled for mail2og?
  $enabled = variable_get('mail2og_enabled_groups', array());
  if (! $enabled[$group->nid] || ! count($enabled)) {
    // this group does not accept mail posts
    return;
  }

  // get the full user object. We need to make sure this user can post to this
  // group- need to check user perms here as well
  $user = user_load($node->uid);
  // is this user in this group and can they send to it?
  if (! $user->og_groups[$group->nid] || ! user_access('send to group')) {
    // @TODO add error reporting
    return;
  }

  // if this user does not have access to create this kind of content, exit
  if (! node_access('create', $node, $user)) {
    return;
  }

  // @TODO check the groups setting here to figure out if this
  // user really can create inside this group.

  // set to the node specified type if this is not a comment. We do this
  // first so that we can check access against the user
  if (variable_get('mail2og_default_node_type', 0) && $node->type != 'comment') {
    $node->type = variable_get('mail2og_default_node_type', 0);
  }

  // add the group id to this node
  $node->og_groups[$group->nid] = $group->nid;
  // set the access to the group
  $node->og_access = variable_get('mail2og_default_node_access', true);
  // set the public/private flag
  $node->og_public = variable_get('mail2og_default_public', false);

  // return the modified node
  return $node;
}


/**
 * Helper function to clean the group title of non-alpha characters
 * @param $title
 * @return string
 */
function mail2og_email_to_address_create($title) {
  // @TODO support other kinds of replacement here
  // take the incoming title and swap all non-alpha characters
  return strtolower(preg_replace("/[^a-zA-Z0-9\s]/", "_", $title));
}


/**
 * Helper function to parse a to email address and create a title that can be
 * used with mysql to match with
 * @param $name
 * @return unknown_type
 */
function mail2og_email_from_address_find($title) {
  // replace all the underscores in the title with
  // wildcards so we can find this title in the db
  return str_replace(array('_', '-'), '%', $title);
}


/* ******************************************* */
/* CCK functions                               */
/* ******************************************* */

// @NOTE All of these functions were cribbed from the cck text module

/**
 * Implementation of hook_field_info().
 */
function mail2og_field_info() {
  return array(
    'mail2og_emailfield' => array(
      'label' => t('Email to OG'),
      'description' => t('Connect an organic group to email.'),
      'content_icon' => 'icon_content_text.png',
    ),
  );
}


/**
 * Implementation of hook_field_settings().
 */
function mail2og_field_settings($op, $field) {
  switch ($op) {
    case 'save':
      return array('mail2og_emailfield_process');

    case 'database columns':
      $columns['value'] = array('type' => 'text', 'size' => 'big', 'not null' => FALSE, 'sortable' => TRUE, 'views' => TRUE);
      return $columns;

    case 'views data':
      $allowed_values = content_allowed_values($field);
      if (count($allowed_values)) {
        $data = content_views_field_views_data($field);
        $db_info = content_database_info($field);
        $table_alias = content_views_tablename($field);

        // Filter: Add a 'many to one' filter.
        $copy = $data[$table_alias][$field['field_name'] .'_value'];
        $copy['title'] = t('@label (!name) - Allowed values', array('@label' => t($field['widget']['label']), '!name' => $field['field_name']));
        $copy['filter']['handler'] = 'content_handler_filter_many_to_one';
        unset($copy['field'], $copy['argument'], $copy['sort']);
        $data[$table_alias][$field['field_name'] .'_value_many_to_one'] = $copy;
        // Argument : swap the handler to the 'many to one' operator.
        $data[$table_alias][$field['field_name'] .'_value']['argument']['handler'] = 'content_handler_argument_many_to_one';
        return $data;
      }
  }
}


/**
 * Implementation of hook_field().
 */
function mail2og_field($op, &$node, $field, &$items, $teaser, $page) {
  switch ($op) {
    case 'validate':
      if (is_array($items)) {
        foreach ($items as $delta => $item) {
          $error_element = isset($item['_error_element']) ? $item['_error_element'] : '';
          if (is_array($item) && isset($item['_error_element'])) unset($item['_error_element']);
          if (! empty($item['value'])) {
            // can we do token replacement?
            if (module_exists('token')) {
              if ($item['value'] = token_replace($item['value'], 'mail2og', $node)) {
                // now we build the email address
                $item['value'] .= '@'. variable_get('mail2og_default_email_domain', $_SERVER['SERVER_NAME']);
              }
            }
            if (! valid_email_address($item['value'])) {
              form_set_error($error_element, t('%name: not a valid email address.', array('%name' => t($field['widget']['label']))));
            }
          }
        }
      }
      return $items;

    case 'sanitize':
      foreach ($items as $delta => $item) {
        if (!empty($field['text_processing'])) {
          $check = is_null($node) || (isset($node->build_mode) && $node->build_mode == NODE_BUILD_PREVIEW);
          $text = isset($item['value']) ? check_markup($item['value'], $item['format'], $check) : '';
        }
        else {
          $text = check_plain($item['value']);
        }

        $items[$delta]['safe'] = $text;
      }
  }
}


/**
 * Implementation of hook_content_is_empty().
 */
function mail2og_content_is_empty($item, $field) {
  if (empty($item['value']) && (string)$item['value'] !== '0') {
    return TRUE;
  }
  return FALSE;
}


function mail2og_token_list($type = 'all') {
   if ($type == 'mail2og' || $type == 'all') {
    $tokens = array();
    $tokens['mail2og']['mail2og_emailfield'] = t('OG Name email safe');
    return $tokens;
   }
}

function mail2og_token_values($type, $node = null) {
  if ($type == 'mail2og'){
    $title = strtolower($node->title);
    $title = preg_replace("/[^\w]/", '_', $title);
    $tokens['mail2og_emailfield'] = $title;
    $tokens['og-id'] = $node->nid;
    return $tokens;
  }
}



/**
 * Implementation of hook_field_formatter_info().
 */
function mail2og_field_formatter_info() {
  return array(
    'default' => array(
      'label' => t('Default'),
      'field types' => array('text'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
  );
}


/**
 * Implementation of hook_widget_info().
 *
 * Here we indicate that the content module will handle
 * the default value and multiple values for these widgets.
 *
 * Callbacks can be omitted if default handing is used.
 * They're included here just so this module can be used
 * as an example for custom modules that might do things
 * differently.
 */
function mail2og_widget_info() {
  return array(
    'mail2og_emailfield' => array(
      'label' => t('Connect Email to OG'),
      'field types' => array('mail2og_emailfield'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
  );
}


/**
 * Implementation of hook_widget_settings().
 */
function mail2og_widget_settings($op, $widget) {
  switch ($op) {
    case 'form':
      $form = array();
      $size = (isset($widget['size']) && is_numeric($widget['size'])) ? $widget['size'] : 60;
      $form['size'] = array(
        '#type' => 'textfield',
        '#title' => t('Size of textfield'),
        '#default_value' => $size,
        '#element_validate' => array('_element_validate_integer_positive'),
        '#required' => TRUE,
      );
      return $form;

    case 'save':
      return array('rows', 'size');
  }
}


/**
 * Implementation of hook_widget().
 *
 * Attach a single form element to the form. It will be built out and
 * validated in the callback(s) listed in hook_elements. We build it
 * out in the callbacks rather than here in hook_widget so it can be
 * plugged into any module that can provide it with valid
 * $field information.
 *
 * Content module will set the weight, field name and delta values
 * for each form element. This is a change from earlier CCK versions
 * where the widget managed its own multiple values.
 *
 * If there are multiple values for this field, the content module will
 * call this function as many times as needed.
 *
 * @param $form
 *   the entire form array, $form['#node'] holds node information
 * @param $form_state
 *   the form_state, $form_state['values'][$field['field_name']]
 *   holds the field's form values.
 * @param $field
 *   the field array
 * @param $items
 *   array of default values for this field
 * @param $delta
 *   the order of this item in the array of subelements (0, 1, 2, etc)
 *
 * @return
 *   the form item for a single element for this field
 */
function mail2og_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $element = array(
    '#type' => $field['widget']['type'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
  );
  return $element;
}


/**
 * Process an individual element.
 *
 * Build the form element. When creating a form using FAPI #process,
 * note that $element['#value'] is already set.
 *
 * The $fields array is in $form['#field_info'][$element['#field_name']].
 */
function mail2og_emailfield_process($element, $edit, $form_state, $form) {
  $field = $form['#field_info'][$element['#field_name']];
  $field_key = $element['#columns'][0];
  $delta = $element['#delta'];
  $element[$field_key] = array(
    '#type' => 'textfield',
    '#default_value' => isset($element['#value'][$field_key]) ? $element['#value'][$field_key] : NULL,
    '#size' => !empty($field['widget']['size']) ? $field['widget']['size'] : 60,
    '#attributes' => array('class' => 'mail2og_emailfield'),
    // The following values were set by the content module and need
    // to be passed down to the nested element.
    '#title' => $element['#title'],
    '#description' => $element['#description'],
    '#required' => $element['#required'],
    '#field_name' => $element['#field_name'],
    '#type_name' => $element['#type_name'],
    '#delta' => $element['#delta'],
    '#columns' => $element['#columns'],
  );

  $element[$field_key]['#maxlength'] = !empty($field['max_length']) ? $field['max_length'] : NULL;

  if (!empty($field['text_processing'])) {
    $filter_key = $element['#columns'][1];
    $format = isset($element['#value'][$filter_key]) ? $element['#value'][$filter_key] : FILTER_FORMAT_DEFAULT;
    $parents = array_merge($element['#parents'] , array($filter_key));
    $element[$filter_key] = filter_form($format, 1, $parents);
  }

  // Used so that hook_field('validate') knows where to flag an error.
  $element['_error_element'] = array(
    '#type' => 'value',
    '#value' => implode('][', array_merge($element['#parents'], array($field_key))),
  );

  return $element;
}


/* ******************************************* */
/* Theme functions                             */
/* ******************************************* */

/**
 * Theme function for 'default' text field formatter.
 */
function theme_mail2og_formatter_default($element) {
  return $element['#item']['safe'];
}


/**
 * FAPI theme for an individual text elements.
 *
 * The textfield or textarea is already rendered by the
 * textfield or textarea themes and the html output
 * lives in $element['#children']. Override this theme to
 * make custom changes to the output.
 *
 * $element['#field_name'] contains the field name
 * $element['#delta]  is the position of this element in the group
 */
function theme_mail2og_emailfield($element) {
  return $element['#children'];
}


/**
 * Displays the group email info
 * @param $group
 * @param $email
 * @return string
 */
function theme_mail2og_block_display_email_info($group, $email) {
  $html = array();
  $html[] = t('You can post to this group by sending an email to %email', array('%email' => $email));
  return implode('<br/>', $html);
}